class Deep_replace(object):
    def __init__(self, operator):
        self.old_new = {}
        self.f = operator
        
    def replace(self, obj):
        obj_id = id(obj)
        if obj_id in self.old_new.keys():
            return self.old_new[obj_id]
        else:
            new = self.f(obj)
            self.old_new[obj_id] = new
            return new

class leanUnit(object):
    def __init__(self, unit):
        self.name = unit.name
        self.id = unit.id
        self.race = unit.race
        self.owner = unit.owner
        if self.owner != None:
            self.owner = self.owner.pid
            
unit_replacer = Deep_replace(leanUnit)

class leanUnitPositionsEvent(object):
    def __init__(self, event, memory):
        self.frame = event.frame
        self.second = event.second
        self.units = {memory.replace(key):event.units[key] for key in event.units.keys()}
        
class leanUnitDiedEvent(object):
    def __init__(self, event, memory):
        self.frame = event.frame
        self.second = event.second
        self.unit = memory.replace(event.unit)
        self.location = event.location
        
class leanPlayerStatsEvent(object):
    def __init__(self, event, memory):
        self.__dict__ = {key: event.__dict__[key] 
                         for key in event.__dict__.keys() 
                         if 'ff_' not in key 
                         and 'player' not in key 
                         and 'stats' != key}
